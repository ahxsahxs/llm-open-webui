version: '3.8'

# SERVICES
services: 
  
  # OPEN WEBUI
  openwebui:
    image: ghcr.io/open-webui/open-webui:cuda
    container_name: openwebui
    ports:
      - "3000:8080"
    volumes:
      - open-webui:/app/backend/data

    environment:
      - WEBUI_NAME=Knowledge Bases and Tools
      - ENABLE_CODE_EXECUTION=false
      - ENABLE_CODE_INTERPRETER=false
      - DEFAULT_MODELS=gemma3
      # https://docs.openwebui.com/getting-started/env-configuration#ollama
      - ENABLE_OLLAMA_API=true
      - OLLAMA_BASE_URLS=http://host.docker.internal:7869
      # https://docs.openwebui.com/getting-started/env-configuration#rag-content-extraction-engine
      - CONTENT_EXTRACTION_ENGINE=docling
      - DOCLING_SERVER_URL=http://host.docker.internal:5001
      - DOCLING_OCR_ENGINE=easyocr
      - DOCLING_OCR_LANG=en,fr,de,es
      # https://docs.openwebui.com/getting-started/env-configuration#retrieval-augmented-generation-rag
      - RAG_TOP_K=50
      - RAG_TOP_K_RERANKER=10
      - RAG_TEXT_SPLITTER=token
      - CHUNK_SIZE=1024
      - CHUNK_OVERLAP=100
      - PDF_EXTRACT_IMAGES=true
      - RAG_FILE_MAX_SIZE=5120
      - RAG_FILE_MAX_COUNT=20
      - RAG_ALLOWED_FILE_EXTENSIONS=pdf,docx,txt
      # https://docs.openwebui.com/getting-started/env-configuration#qdrant
      - QDRANT_API_KEY=__QDRANT_KEY__
      - QDRANT_URI=http://host.docker.internal:6333
      # https://docs.openwebui.com/getting-started/env-configuration#chat-permissions
      - USER_PERMISSIONS_CHAT_STT=false
      - USER_PERMISSIONS_CHAT_TTS=false
      - USER_PERMISSIONS_CHAT_MULTIPLE_MODELS=false
      # https://docs.openwebui.com/getting-started/env-configuration#database-pool
      - DATABASE_URL=postgresql://__PG_USER__:__PG_PASS__@host.docker.internal:5432/postgres
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    extra_hosts:
      - host.docker.internal:host-gateway
    restart: unless-stopped
    networks:
      - open-webui-network
    depends_on:
      - ollama
      - docling
      - qdrant
      - hayhooks

  # OLLAMA
  ollama:
    image: docker.io/ollama/ollama:latest
    container_name: ollama
    pull_policy: always
    tty: true
    restart: unless-stopped
    ports:
      - 7869:11434
    environment:
      - OLLAMA_KEEP_ALIVE=24h
    volumes:
      - ollama:/root/.ollama
    networks:
      - open-webui-network
    post_start:
      - command: |
          ollama pull gemma3:latest
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all 
              capabilities: [gpu]

  # DOCLING
  docling:
    image: quay.io/docling-project/docling-serve-cu124
    container_name: docling
    ports:
      - 5001:5001
    environment:
      - DOCLING_SERVE_ENABLE_UI=true
    networks:
      - open-webui-network
    volumes:
      - docling_cache:/opt/app-root/src/.cache
    post_start:
      - command: |
          docling-tools models download
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all 
              capabilities: [gpu]
    
  
  # QDRANT VECTOR DATABASE
  qdrant:
    image: qdrant/qdrant:latest
    restart: always
    container_name: qdrant
    ports:
      - 6333:6333
      - 6334:6334
    expose:
      - 6333
      - 6334
      - 6335
    configs:
      - source: qdrant_config
        target: /qdrant/config/production.yaml
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - open-webui-network

  # POSTGRESQL DATABASE
  postgres:
    image: postgres
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: __PG_USER__
      POSTGRES_PASSWORD: __PG_PASS__
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./pg_init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - open-webui-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U __PG_USER__ -d postgres"]
      interval: 1s
      timeout: 5s
      retries: 10

  # Hayhooks OpenAPI Tools 
  hayhooks:
    build:
      context: ./hayhooks           # Build context 
      dockerfile: Dockerfile        # Dockerfile name (default)
    image: hayhooks-pipelines       # Tag the built image
    container_name: hayhooks        # Container name
    ports:
      - "1416:1416"                 # Host:Container port mapping
    environment:                    # Environment variables
      - DEBUG=true
      - HAYHOOKS_ADDITIONAL_PYTHON_PATH=./common
      - HAYHOOKS_PIPELINES_DIR=./pipelines
      # Postgres
      - DB_HOST=host.docker.internal
      - DB_PORT=5432
      - DB_NAME=postgres
      - DB_USER=__PG_USER__
      - DB_PASSWORD=__PG_PASS__
      # Qdrant
      - QDRANT_API_KEY=__QDRANT_KEY__
      - QDRANT_URI=http://host.docker.internal:6333
      # Ollama
      - OLLAMA_URI=http://host.docker.internal:7869
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:                    # Service dependencies
      - postgres
      - qdrant
      - ollama
    networks:
      - open-webui-network
    volumes:
      - ./logs/hayhooks:/tmp/deploy_logs/
    healthcheck:                    # Health check configuration
      test: ["CMD", "curl", "-f", "http://localhost:1416/docs"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 40s

# VOLUMES
volumes:
  open-webui:
  ollama:
  docling_cache:
  qdrant_data:
  pgdata:

# NETWORKS
networks:
  open-webui-network:
    name: "open-webui-network"
    external: false

configs:
  qdrant_config:
    content: |
      log_level: INFO
      service:
        enable_tls: false
        api_key: __QDRANT_KEY__

  